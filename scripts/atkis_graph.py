''' atkis_graph.py : Builds a graph from ATKIS data.

The data comes as numpy.array generated by arcpy.da.FeatureClassToNumPyArray()
with explode_to_points=True.

'''
from math import sqrt
from collections import defaultdict
from itertools import tee, izip
import numpy as np
from graph import Graph


def pairwise(iterable):
  ''' Example: [w, x, y, z]  --> [(w, x), (x, y), (y, z)]. '''
  a, b = tee(iterable)
  next(b, None)
  return izip(a, b)


def distance(p1, p2):
  ''' Euclid. '''
  return sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)


def create_mappings_from_expanded_polylines(arr):
  ''' Creates two mappings (defined below) from lines in a numpy.recarray. '''
  def add_node(position):
    ''' Returns node index of the node at the position. '''
    if position not in coord_to_node:
      coord_to_node[position] = len(coord_to_node)
    return coord_to_node[position]
  def add_two_arcs(x, y, arc_id, cost):
    ''' Bidirectional. '''
    arcs[x].add((y, arc_id, cost))
    arcs[y].add((x, arc_id, cost))

  coord_to_node = {}  # {(easting, northing) : node_index}
  arcs = defaultdict(set)  # {base_node --> set([(head_node, fid, cost)])
  for a, b in pairwise(arr):
    if a['fid'] == b['fid']:
      index_a = add_node(tuple(a['shape']))
      index_b = add_node(tuple(b['shape']))
      cost = distance(a['shape'], b['shape'])
      add_two_arcs(index_a, index_b, a['fid'], cost)
  return coord_to_node, arcs


def create_graph_from_arc_map(preliminary_arcs):
  ''' Assumes the input contains two arcs for bidirectional edges. '''
  g = Graph()
  for from_, out_set in preliminary_arcs.items():
    for (to, fid, cost) in out_set:
      g.add_edge(from_, to, cost)
  return g


def create_graph(arr):
  ''' Creates the graph. '''
  m1, m2 = create_mappings_from_expanded_polylines(arr)
  return create_graph_from_arc_map(m2)


import unittest

class AtkisGraphTest(unittest.TestCase):
  def test_create_mappings(self):
    arr = np.array([(15, [1.0, 3.0]), (15, [2.0, 0.0]), (16, [5.0, 0.0]),
                    (16, [2.0, 0.0]), (21, [6.0, 2.0]), (21, [5.0, 0.0]),
                    (22, [5.0, 0.0]), (22, [3.0, -1.0])], 
                   dtype=[('fid', '<i4'), ('shape', '<f4', (2,))])
    coord_to_node, arcs = create_mappings_from_expanded_polylines(arr)
    #print coord_to_node
    #print arcs

  def test_create_graph(self):
    arr = np.array([(15, [1.0, 3.0]), (15, [2.0, 0.0]), (16, [5.0, 0.0]),
                    (16, [2.0, 0.0]), (21, [6.0, 2.0]), (21, [5.0, 0.0]),
                    (22, [5.0, 0.0]), (22, [3.0, -1.0])], 
                   dtype=[('fid', '<i4'), ('shape', '<f4', (2,))])
    map1, map2 = create_mappings_from_expanded_polylines(arr)
    graph = create_graph_from_arc_map(map2)
    print graph


if __name__ == '__main__':
  unittest.main()

